#!/usr/bin/python
#
# This file is part of vkbd-ng
# Copyright (C) 2010 mink365 <mink365@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Additional permission under GNU GPL version 3 section 7
#
# The copyright holders grant you an additional permission under Section 7
# of the GNU General Public License, version 3, exempting you from the
# requirement in Section 6 of the GNU General Public License, version 3, to
# accompany Corresponding Source with Installation Information for the
# Program or any work based on the Program. You are still required to comply
# with all other Section 6 requirements to provide Corresponding Source.
#

APP_NAME    = 'Vkbd-ng'
APP_VERSION = '0.1.0'


WIDTH = 800
HEIGHT = 300
FS = False
TITLE = "Virtual Keyboard"
WM_INFO = ("Virtual Keyboard", "vkbd")

import sys
import dbus
import e_dbus
import ecore
import ecore.evas
import ecore.x
import evas
import edje
from optparse import OptionParser
######local#########
from keyboard import VirtualKeyboard
from toggle_obj import VkbdToggle
from cand_panel import CandidatePanel

from gettext import dgettext
_  = lambda a : dgettext("ibus", a)
N_ = lambda a : a

def on_resize(ee):
    x, y, w, h = ee.evas.viewport
    ee.data["main"].size = w, h


def on_delete_request(ee):
    ecore.main_loop_quit()


class MainGui():
    def __init__(self, ee, edje_file):
        self.ee = ee

        ee.title = TITLE
        ee.name_class = WM_INFO
        ee.evas.font_hinting_set(evas.EVAS_FONT_HINTING_AUTO)

        ex = ecore.x.Window_from_xid(ee.window_get())
        ex.icccm_hints_set(0, 1, 0, 0, 0, 0, 0)
        """  shape the window  """
        ee.shaped_set(1)        

        canvas = ee.evas

        self.vkbd_edje = edje.Edje(canvas, file=edje_file, group="main")
        self.vkbd_edje.size = canvas.size
        self.vkbd_edje.focus = True
        self.vkbd_edje.show()

        keyboard = VirtualKeyboard(self, canvas, edje_file)
        self.vkbd_edje.part_swallow("keyboard", keyboard)

        self.cand_panel = CandidatePanel(canvas, edje_file)
        self.vkbd_edje.part_swallow("cand_panel", self.cand_panel.panel_edje)

        ee.data["main"] = self.vkbd_edje
        ee.callback_delete_request = on_delete_request
        ee.callback_resize = on_resize
        ee.move(0, 280)
        ee.show()
        ex.show()



def parse_geometry(option, opt, value, parser):
    try:
        w, h = value.split("x")
        w = int(w)
        h = int(h)
    except Exception, e:
        raise optparse.OptionValueError("Invalid format for %s" % option)
    parser.values.geometry = (w, h)

def get_default_engine(engines):
    # XXX: find a better way to do this.
    default_engine = "software_x11"

    if default_engine in engines:
        return default_engine

    return None

def process_cmdline():
    usage = "usage: %prog [options] [path]"
    op = OptionParser(usage=usage, version="%s %s" % (APP_NAME, APP_VERSION))

    engines = list(ecore.evas.engines_get())
    op.add_option("-e", "--engine", type="choice",
                  choices=engines, default=get_default_engine(engines),
                  help=("which display engine to use (%s)." %
                        ", ".join(engines)))
    op.add_option("-g", "--geometry", type="string", metavar="WxH",
                  action="callback", callback=parse_geometry,
                  default=(800, 300),
                  help="use given window geometry")
    op.add_option("-t", "--theme",
                  default="themes/vkbd.edj",
                  help=("which theme to use, default=%default"))
    return op.parse_args()


#################  Main  #######################
def main():
    options, args = process_cmdline()

    w, h = options.geometry
    ee = ecore.evas.new(engine_name=options.engine, w=w, h=h)
    #ee.borderless_set(1)

    VkbdToggle(ee)

    MainGui(ee, options.theme)	

    ecore.main_loop_begin()
	
if __name__ == "__main__":
    main()
